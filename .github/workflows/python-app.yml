name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
      with:
        version: latest  # Możesz podać konkretną wersję, np. 1.1.14, jeśli potrzebna
        virtualenvs-create: true  # Tworzenie środowiska wirtualnego
        virtualenvs-in-project: true  # Tworzenie środowiska w katalogu projektu
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Build Dependencies
      run: poetry install --no-root --with=dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Security Scan with Bandit
      run: bandit -r .
    - name: Test with pytest
      run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ustalanie kolejności dla testów jednostkowych po wcześniejszych zadaniach
    steps:
    - name: Deploy application
      run: echo "Deploying application..."
