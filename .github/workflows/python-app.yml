name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Cache Poetry dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Install dependencies
      run: |
        poetry install --no-dev
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Format code with Black
      run: |
        black --check .
    - name: Security scanning with bandit
      run: |
        bandit -r .

  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        poetry install --no-dev
    - name: Run unit tests
      run: |
        pytest --maxfail=1 --disable-warnings -q

  static-tests:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        poetry install --no-dev
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Format code with black
      run: |
        black --check .
    - name: Security scanning with bandit
      run: |
        bandit -r .
